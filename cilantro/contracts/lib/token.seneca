# do not delete the comment below. it is necessary for unit tests.
# UNITTEST_FLAG_CURRENCY_SENECA 1729

import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports

owner = 'STU'

balances = st.create_table('balances', [
    ('address', st.str_len(200), True),
    ('amount', int),
])

allowances = st.create_table('allowances', [
    ('address', st.str_len(200)),
    ('spender', st.str_len(200)),
    ('amount', int)
])


def _raw_transfer(sender, receiver, amount):
    s_balance = balances.select().where(balances.address == sender).run()
    assert s_balance, 'Sender has no wallet, therefore no funds.'

    s_balance = s_balance[0]

    assert s_balance['amount'] >= amount, 'Sender does not have enough funds'

    balances.update({
        'amount': s_balance['amount'] - amount
        }).where(balances.address == sender).run()

    r_balance = balances.select().where(balances.address == receiver).run()

    if not r_balance:
        balances.insert([{'address': receiver, 'amount': amount}]).run()
    else:
        print(r_balance)
        #r_balance = r_balance[0]
        balances.update([{
            'amount': r_balance['amount'] + amount
        }]).where(balances.address == receiver).run()


@export
def transfer(address, amount):
    _raw_transfer(rt.global_run_data.author, address, amount)


@export
def allow(spender, amount):
    allowance = allowances.select.where(
        allowances.address == rt.caller_id and allowances.spender == spender
        ).run()

    if not allowance:
        allowances.insert({
            'address': rt.caller_id,
            'spender': spender,
            'amount': amount
        })
    else:
        allowances.update({
            'amount': amount
        }).where(
            allowances.address == rt.caller_id and
            allowances.spender == spender
        ).run()


@export
def transfer_from(owner, receiver, amount):
    allowance = allowances.select.where(
        allowances.address == owner and allowances.spender == rt.caller_id
    ).run()

    assert allowance, 'Caller has no rights to the funds'

    assert allowance['amount'] >= amount, 'Caller is not allowed enough funds'

    allowances.update({
        'amount': allowance['amount'] - amount
    }).where(allowances.address == rt.caller_id and allowances.spender == spender).run()

    _raw_transfer(owner, receiver)

@export
def balance_of(address):
    balance = balances.select().where(balances.address == address).run()
    if not balance:
        return 0
    return balance[0]['amount']

@export
def mint(address, amount):
    if rt.caller_id == owner:
        wallet = balances.select.where(balances.address == address).run()

        if not wallet:
            # create wallet
            balances.insert([{'address': address, 'amount': amount}]).run()
        else:
            balances.update({'amount': wallet[0]['amount'] + amount})\
                .where(balances.address == address)\
                .run()


@export
def change_owner(address):
    if rt.caller_id == owner:
        owner = address

exports = make_exports()

if __name__ == '__main__':
    balances.insert([{'address': 'STU', 'amount': 1000000}]).run()
    balances.insert([{'address': 'DAVIS', 'amount': 1000000}]).run()
