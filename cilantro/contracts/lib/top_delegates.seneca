import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import num_top_delegates as ntd
import basic_math
import election

@export
def create_election(*args, **kwargs):
    return election.create_election(*args, int, **kwargs)

@export
def cast_vote(*args, **kwargs):
    return election.cast_vote(*args, **kwargs)

@export
def tally_votes(election_id):
    return election.tally_votes(election_id, basic_math.mode)

exports = make_exports()

@export
def get(*args, **kwargs):
    return election.get(*args, **kwargs)

def filter_delegates(election_id, top_delegates):
    voter_id = rt.global_run_data.author
    num_top_delegates = ntd.get()
    top_delegates = set(top_delegates)
    assert election.get_election(election_id), \
        'election is not found or no longer opened'
    assert len(top_delegates) <= num_top_delegates, 'You can only election for {} delegates'.format(num_top_delegates)
    res = t_top_delegates_election.select().where(
        t_top_delegates_election.election_id == election_id and
        t_top_delegates_election.voter_id == voter_id
    ).run()
    delegates_already_electiond_for = set([r['delegate_id'] for r in res])
    delegates_list_full = top_delegates.union(delegates_already_electiond_for)
    assert len(delegates_list_full) <= num_top_delegates, \
        'You already electiond for {}(max={}) delegates and tried to election for {} more delegate(s).'.format(
            len(delegates_already_electiond_for), num_top_delegates, len(top_delegates)
        )
    return top_delegates.difference(delegates_already_electiond_for)

@export
def cast_vote(election_id, top_delegates):
    delegates = filter_delegates(election_id, top_delegates)
    return election.cast_vote(election_id, delegates)

def processor(res):
    elections = list(reversed(sorted(
        [(r, res.count(r)) for r in set(res)],
        key=lambda x:x[1]
    )))
    return elections[:num_top_delegates]

@export
def tally_votes(election_id):
    return election.tally_votes(election_id, processor)

exports = make_exports()

if __name__ == '__main__':
    pass
