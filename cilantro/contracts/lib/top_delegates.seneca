import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import num_top_delegates as ntd
import election

POLICY = 'top_delegates'
STATUS = election.enum()

t_top_delegates_election = st.create_table(POLICY, [
    ('electionr_id', st.str_len(30)),
    ('election_id', st.str_len(30)),
    ('delegate_id', st.str_len(30))
])
kv_policy = kv.create_kv('constants')

@export
def start_election(policy_maker_id):
    election_id = election.create_election(policy_maker_id, POLICY)
    return election_id

def filter_delegates(electionr_id, election_id, top_delegates):
    num_top_delegates = ntd.get('num_top_delegates')
    top_delegates = set(top_delegates)
    assert election.get_election(election_id), \
        'election is not found or no longer opened'
    assert len(top_delegates) <= num_top_delegates, 'You can only election for {} delegates'.format(num_top_delegates)
    res = t_top_delegates_election.select().where(
        t_top_delegates_election.election_id == election_id and
        t_top_delegates_election.electionr_id == electionr_id
    ).run()
    delegates_already_electiond_for = set([r['delegate_id'] for r in res])
    delegates_list_full = top_delegates.union(delegates_already_electiond_for)
    assert len(delegates_list_full) <= num_top_delegates, \
        'You already electiond for {}(max={}) delegates and tried to election for {} more delegate(s).'.format(
            len(delegates_already_electiond_for), num_top_delegates, len(top_delegates)
        )
    return top_delegates.difference(delegates_already_electiond_for)

@export
def cast_vote(electionr_id, election_id, top_delegates):
    delegates = filter_delegates(electionr_id, election_id, top_delegates)
    if len(delegates) == 0: return
    t_top_delegates_election.insert([
        {'election_id': election_id,'electionr_id': electionr_id,'delegate_id': d} for d in delegates
    ]).run()

@export
def tally_votes(policy_maker_id, election_id):
    num_top_delegates = ntd.get('num_top_delegates')
    res = t_top_delegates_election.select().where(
        t_top_delegates_election.election_id == election_id
    ).run()
    res = [r['delegate_id'] for r in res]
    elections = list(reversed(sorted(
        [(r, res.count(r)) for r in set(res)],
        key=lambda x:x[1]
    )))
    top_delegates = elections[:num_top_delegates]
    kv_policy.set([(POLICY, ','.join([d[0] for d in top_delegates]))]).run()
    election.close_election(policy_maker_id, POLICY, STATUS.PASSED)
    return top_delegates

@export
def get(attr):
    return kv_policy.get(attr).run()

exports = make_exports()

if __name__ == '__main__':
    pass
