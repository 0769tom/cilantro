import seneca.storage.tabular as st
import seneca.storage.kv as kv
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports
import basic_math
import election

POLICY_NAME = 'num_top_delegates'

t_election = st.create_table(POLICY_NAME, [
    ('election_id', st.str_len(30)),
    ('voter_id', st.str_len(30)),
    (POLICY_NAME, int)
])

# TODO remove when implicit KV is implemented
kv_policy = kv.create_kv('constants')
@export
def get(attr):
    return kv_policy.get(attr).run()

# TODO ask Carl to see if we can remove this step
@export
def cast_vote(election_id, num_top_delegates):
    voter_id = rt.global_run_data.author
    t_election.insert([
        {'election_id': election_id, 'voter_id': voter_id, POLICY_NAME: num_top_delegates}
    ]).run()

@export
def tally_votes(election_id):
    results = [r[POLICY_NAME] for r in t_election.select().where(
        t_election.election_id == election_id
    ).run()]
    num_top_delegates = basic_math.mode(results)
    kv_policy.set([(POLICY_NAME, num_top_delegates)]).run()
    election.pass_election(election_id)
    return num_top_delegates

# TODO Remove when auto-export is implemented
exports = make_exports()

if __name__ == '__main__':
    pass
