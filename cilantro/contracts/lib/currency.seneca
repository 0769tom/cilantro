#!/usr/bin/env seneca_0.1
## Example currency smart contract ##
# UNITTEST_FLAG_CURRENCY_SENECA 1729


import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports


ledger = st.create_table('ledger', [
    ('wallet_id', st.str_len(200), True),
    ('balance', int),
])


@export
def get_balance(wallet_id):
    return ledger.select('balance').where(ledger.wallet_id == wallet_id).run()[0]['balance']


@export
def wallet_exists(wallet_id):
    print("checking if wallet {} exists".format(wallet_id))

    print("wallet {} has ledger wallet id {}".format(wallet_id, ledger.wallet_id))

    query = ledger.select('wallet_id').where(ledger.wallet_id == wallet_id)
    print('to_sql value: {}'.format(query.underlying_obj.to_sql()))

    res = query.run()

    print("got query from checking wallet {}... query result = \n{}".format(wallet_id, res))

    return len(res) == 1


@export
def create_wallet(wallet_id):
    print("checking wallet {} exists before CREATION coins".format(wallet_id))
    assert not wallet_exists(wallet_id), "Wallet already exists"
    ledger.insert([{'wallet_id': wallet_id, 'balance': 0}]).run()


def add_coins(wallet_id, amount_to_add):
    assert amount_to_add >= 0, "It's not possible to 'add' a negative balance"

    print("checking wallet {} exists before adding coins".format(wallet_id))
    if not wallet_exists(wallet_id):
        create_wallet(wallet_id)

    old_balance = get_balance(wallet_id)
    ledger.update({'balance': old_balance + amount_to_add}) \
        .where(ledger.wallet_id == wallet_id).run()


def remove_coins(wallet_id, amount_to_remove):
    assert wallet_exists(wallet_id), "Wallet id is not present in ledger"
    assert amount_to_remove >= 0, "Removing negative balances not permitted"

    old_balance = get_balance(wallet_id)
    assert old_balance - amount_to_remove >= 0, "No negative balances allowed"
    ledger.update(balance=old_balance - amount_to_remove) \
          .where(wallet_id=wallet_id).run()


@export
def transfer_coins(receiver_id, amount):
    sender_id = rt.global_run_data.caller_user_id
    remove_coins(sender_id, amount)
    add_coins(receiver_id, amount)


exports = make_exports()

if __name__ == '__main__':
    print("\n\n STARTING CURRENCY CONTRACT MAIN FUNC \n\n")
    print("is main")

    GENESIS_WALLETS = [
        {
            "wallet": "324ee2e3544a8853a3c5a0ef0946b929aa488cbe7e7ee31a0fef9585ce398502",
            "amount": 3696947
        },
        {
            "wallet": "a103715914a7aae8dd8fddba945ab63a169dfe6e37f79b4a58bcf85bfd681694",
            "amount": 3696947
        },
        {
            "wallet": "20da05fdba92449732b3871cc542a058075446fedb41430ee882e99f9091cc4d",
            "amount": 3696947
        },
        {
            "wallet": "ed19061921c593a9d16875ca660b57aa5e45c811c8cf7af0cfcbd23faa52cbcd",
            "amount": 3696947
        },
        {
            "wallet": "cb9bfd4b57b243248796e9eb90bc4f0053d78f06ce68573e0fdca422f54bb0d2",
            "amount": 3696947
        }
    ]
    # The smart contract is being run directly for the first (and only) time.

    # Seed genesis wallets
    # for row in GENESIS_WALLETS:
    #     print("X5543 adding amount {} to wallet {}".format(row['amount'], row['wallet']))
    #     create_wallet(row['wallet'])
    #     add_coins(row['wallet'], row['amount'])

    primordial_account = \
      str(crypto.base64.b64decode('IAHpAaIsqZtqbWmreNFcg1aifxaawQXIWyaA39Lx8bfKgPpb'))

    monetary_base = 10 ** 10

    # create_wallet(primordial_account)
    # add_coins(primordial_account, monetary_base)

    print("\n[1] SEEDING FIRST WALLET\n")
    create_wallet('324ee2e3544a8853a3c5a0ef0946b929aa488cbe7e7ee31a0fef9585ce398502')
    add_coins('324ee2e3544a8853a3c5a0ef0946b929aa488cbe7e7ee31a0fef9585ce398502', 1337)

    bal = get_balance('nonexisting wallet')
    print("balance of first wallet: {}".format(bal))

    print("\n[2] SEEDING SECOND WALLET\n")
    create_wallet('ed19061921c593a9d16875ca660b57aa5e45c811c8cf7af0cfcbd23faa52cbcd')
    add_coins('ed19061921c593a9d16875ca660b57aa5e45c811c8cf7af0cfcbd23faa52cbcd', 2460)



