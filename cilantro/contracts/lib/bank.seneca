#!/usr/bin/env seneca_0.1
## Example currency smart contract ##
# UNITTEST_FLAG_CURRENCY_SENECA 1729


import seneca.storage.tabular as st
import seneca.crypto as crypto
import seneca.runtime as rt
import seneca.stdlib as std
from seneca.modulelib import export, make_exports


t_bank = st.create_table('bank', [
    ('balance', int),
])

t_stake_election = st.create_table('stake_election', [
    ('election_id', st.str_len(30)),
    ('voter_id', st.str_len(30), True),
    ('stake', int)
])

t_actor = st.create_table('actor', [
    ('role', st.str_len(32)),
])

kv_policy = kv.create_kv('constants')

@export
def start_election(policy_maker_id, policy):
    assert policy in ['witness_stake', 'delegate_stake', 'masternode_stake']
    election_id = election.create_election(policy_maker_id, policy)
    return election_id

@export
def cast_vote(voter_id, election_id, stake):
    assert election.get_election(election_id), 'election is not found or no longer opened'
    t_num_top_delegates_election.insert([
        {'election_id': election_id, 'voter_id': voter_id, 'value': value}
    ]).run()

@export
def stake_as_delegate(staker_id):
    pass

@export
def stake_as_witness(staker_id):
    pass

@export
def stake_as_masternode(staker_id):
    pass

def start_bank(bank_id, money_amount):
    pass

exports = make_exports()
